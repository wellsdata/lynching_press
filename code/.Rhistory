# append decade information for aggregation
textdata$decade <- paste0(substr(textdata$year, 0, 3), "0")
library(kableExtra)
articles_decades %>%
kbl(caption = "LOC Lynching Articles by Decade (n=11,194, 6/23/2024)", font_size = 30) %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
column_spec(1, bold = T, border_right = T) %>%
column_spec(2, width = "5em") %>%
column_spec(3, width = "5em", background = "yellow")
articles_decades <- textdata %>%
distinct(doc_id, .keep_all=TRUE) %>%
count(decade) %>%
mutate(pct_total= (n/sum(n))) %>%
mutate(pct_total= formattable::percent(pct_total)) %>%
# mutate(pct_total = round(pct_total, 1)) %>%
arrange(desc(decade))
library(kableExtra)
articles_decades %>%
kbl(caption = "LOC Lynching Articles by Decade (n=11,194, 10/19/2024)", font_size = 30) %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
column_spec(1, bold = T, border_right = T) %>%
column_spec(2, width = "5em") %>%
column_spec(3, width = "5em", background = "yellow")
# number of topics
# K <- 20
K <- 6
# set random number generator seed
set.seed(9161)
#Latent Dirichlet Allocation, LDA
topicModel2 <- LDA(DTM, K, method="Gibbs", control=list(iter = 500, verbose = 25, alpha = 0.2))
tmResult <- posterior(topicModel2)
theta <- tmResult$topics
beta <- tmResult$terms
topicNames <- apply(terms(topicModel2, 10), 2, paste, collapse = " ")  # reset topicnames
# Step 1: Check dimensions
n_theta <- nrow(theta)
n_textdata <- length(textdata$decade)
cat("Number of rows in theta: ", n_theta, "\n")
cat("Number of documents in textdata: ", n_textdata, "\n")
# Check if textdata contains all the documents in theta
common_ids <- intersect(rownames(theta), textdata$doc_id) # Assuming textdata has a 'doc_id' column
# Filter textdata to include only the documents present in theta
textdata_filtered <- textdata[textdata$doc_id %in% common_ids, ]
# Check dimensions after filtering
n_textdata_filtered <- nrow(textdata_filtered)
cat("Number of documents in filtered textdata: ", n_textdata_filtered, "\n")
# Ensure the lengths match now
if (n_theta != n_textdata_filtered) {
stop("The number of rows in 'theta' still does not match the length of 'textdata_filtered$decade'.")
}
# Align rownames of theta with filtered textdata
theta_aligned <- theta[rownames(theta) %in% textdata_filtered$doc_id, ]
# Optional: Verify the order of documents
if (!all(rownames(theta_aligned) == textdata_filtered$doc_id)) {
# If the order doesn't match, reorder one to match the other
textdata_filtered <- textdata_filtered[match(rownames(theta_aligned), textdata_filtered$doc_id), ]
}
# Ensure they are now aligned and can be combined
if (!all(rownames(theta_aligned) == textdata_filtered$doc_id)) {
stop("The document IDs still do not match. Please check the data alignment.")
}
# Step 2: Combine data
topic_data <- data.frame(theta_aligned, decade = textdata_filtered$decade)
# Step 3: Aggregate data
topic_proportion_per_decade <- aggregate(. ~ decade, data = topic_data, FUN = mean)
# get mean topic proportions per decade
# topic_proportion_per_decade <- aggregate(theta, by = list(decade = textdata$decade), mean)
# set topic names to aggregated columns
colnames(topic_proportion_per_decade)[2:(K+1)] <- topicNames
# reshape data frame
vizDataFrame <- melt(topic_proportion_per_decade, id.vars = "decade")
# #filter out 1960 - one article
vizDataFrame <- vizDataFrame %>%
filter(!decade==1960)
View(vizDataFrame)
#add categories
vizDataFrame <- vizDataFrame %>%
mutate(category = case_when(
str_detect(variable,  "counti citi night mile jail day town morn march juli") ~ "lynchings",
str_detect(variable, "law crime peopl lynch great excit state good citizen countri") ~ "critizing_lynching",
str_detect(variable, "lynch mob negro jail men hang night crowd prison attempt") ~ "negro_lynching",
str_detect(variable, "negro murder white lynch man kill year assault charg mrs") ~ "female_victim",
str_detect(variable, "sheriff state court juri governor order offic prison judg deputi") ~ "legal",
str_detect(variable, "bodi fire shot hang hous tree found street rope door") ~ "lynch_mob",
))
theta2 <- as.data.frame(theta)
female <- theta2 %>%
#renaming for a general topic
rename(female = '4') %>%
top_n(20, female ) %>%
arrange(desc(female )) %>%
select(female )
# Apply rownames_to_column
female  <- tibble::rownames_to_column(female , "story_id")
female $story_id <- gsub("X", "", female $story_id)
head(female$story_id, 20)
#Checks out June 23
theta2 <- as.data.frame(theta)
legal <- theta2 %>%
#renaming for a general topic
rename(legal = '5') %>%
top_n(20, legal ) %>%
arrange(desc(legal )) %>%
select(legal )
# Apply rownames_to_column
legal  <- tibble::rownames_to_column(legal , "story_id")
legal $story_id <- gsub("X", "", legal $story_id)
head(legal$story_id, 20)
#Checks out June 23
theta2 <- as.data.frame(theta)
unknown <- theta2 %>%
#renaming for a general topic
rename(unknown = '3') %>%
top_n(20, unknown ) %>%
arrange(desc(unknown )) %>%
select(unknown )
# Apply rownames_to_column
unknown  <- tibble::rownames_to_column(unknown , "story_id")
unknown $story_id <- gsub("X", "", unknown $story_id)
head(unknown$story_id, 20)
#Checks out June 23
#main theme is negros are lynching victims
theta2 <- as.data.frame(theta)
critic<- theta2 %>%
#renaming for a general topic
rename(critic = '2') %>%
top_n(20, critic) %>%
arrange(desc(critic)) %>%
select(critic)
# Apply rownames_to_column
critic <- tibble::rownames_to_column(critic, "story_id")
critic$story_id <- gsub("X", "", critic$story_id)
#Checks out June 23
# plot topic proportions per decade as bar plot
ggplot(vizDataFrame, aes(x=decade, y=value, fill=category)) +
geom_bar(stat = "identity") + ylab("proportion") +
scale_fill_manual(values = paste0(alphabet(20), "FF"), name = "decade") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(values=c("#9933FF",
"#33FFFF",
"red",
"yellow",
"darkblue",
"green"))+
#                           "blue"))+
#                           #"pink",
#                           #"gray",
#                           #"orange")) +
labs(title = "Common Narratives in Lynching News Coverage",
subtitle = "Six probable topics in white press sample. n=9,590",
caption = "Aggregate mean topic proportions per decade. Graphic by (redated - peer review) & (redated - peer review), 10-19-2024")
ggsave(here::here("../lynching_press/output_images_tables/Article_Images/Figure_16_white_topics_oct_19_2024.png"),device = "png",width=9,height=6, dpi=800)
ggsave(here::here("../lynching_press/output_images_tables/Article_Images/Figure_15_white_topics_oct_19_2024.png"),device = "png",width=9,height=6, dpi=800)
textdata <- black_articles %>%
select(filename, sentence, year) %>%
as.data.frame() %>%
rename(doc_id = filename, text= sentence)
# load stopwords
english_stopwords <- readLines("https://slcladal.github.io/resources/stopwords_en.txt", encoding = "UTF-8")
# create corpus object
corpus <- Corpus(DataframeSource(textdata))
# Preprocessing chain
processedCorpus <- tm_map(corpus, content_transformer(tolower))
processedCorpus <- tm_map(processedCorpus, removeWords, english_stopwords)
processedCorpus <- tm_map(processedCorpus, removePunctuation, preserve_intra_word_dashes = TRUE)
processedCorpus <- tm_map(processedCorpus, removeNumbers)
processedCorpus <- tm_map(processedCorpus, stemDocument, language = "en")
processedCorpus <- tm_map(processedCorpus, stripWhitespace)
#DTM: rows correspond to the documents in the corpus. Columns correspond to the terms in the documents. Cells correspond to the weights of the terms. (Girder)
# compute document term matrix with terms >= minimumFrequency
minimumFrequency <- 5
DTM <- DocumentTermMatrix(processedCorpus, control = list(bounds = list(global = c(minimumFrequency, Inf))))
# have a look at the number of documents and terms in the matrix
dim(DTM)
# due to vocabulary pruning, we have empty rows in our DTM
# LDA does not like this. So we remove those docs from the
# DTM and the metadata
sel_idx <- slam::row_sums(DTM) > 0
DTM <- DTM[sel_idx, ]
textdata <- textdata[sel_idx, ]
#5 term minimum[1] 1387 3019
#5 term minimum[1] 308597 10339
# append decade information for aggregation
textdata$decade <- paste0(substr(textdata$year, 0, 3), "0")
# Step 1: Check dimensions
n_theta <- nrow(theta)
n_textdata <- length(textdata$decade)
cat("Number of rows in theta: ", n_theta, "\n")
cat("Number of documents in textdata: ", n_textdata, "\n")
# Check if textdata contains all the documents in theta
common_ids <- intersect(rownames(theta), textdata$doc_id) # Assuming textdata has a 'doc_id' column
# Filter textdata to include only the documents present in theta
textdata_filtered <- textdata[textdata$doc_id %in% common_ids, ]
# Check dimensions after filtering
n_textdata_filtered <- nrow(textdata_filtered)
cat("Number of documents in filtered textdata: ", n_textdata_filtered, "\n")
# Ensure the lengths match now
if (n_theta != n_textdata_filtered) {
stop("The number of rows in 'theta' still does not match the length of 'textdata_filtered$decade'.")
}
#install.packages("formattable")
articles_decades <- textdata %>%
distinct(doc_id, .keep_all=TRUE) %>%
count(decade) %>%
mutate(pct_total= (n/sum(n))) %>%
mutate(pct_total= formattable::percent(pct_total)) %>%
# mutate(pct_total = round(pct_total, 1)) %>%
arrange(desc(decade))
library(kableExtra)
articles_decades %>%
kbl(caption = "Black Press Lynching Articles by Decade (n=1,604, 6/24/2024)", font_size = 30) %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
column_spec(1, bold = T, border_right = T) %>%
column_spec(2, width = "5em") %>%
column_spec(3, width = "5em", background = "yellow")
#Fact check 308597 rows tabulated
#sum(articles_decades$n)
# number of topics
# K <- 20
K <- 6
# set random number generator seed
set.seed(9161)
#Latent Dirichlet Allocation, LDA
topicModel2 <- LDA(DTM, K, method="Gibbs", control=list(iter = 500, verbose = 25, alpha = 0.2))
tmResult <- posterior(topicModel2)
theta <- tmResult$topics
beta <- tmResult$terms
topicNames <- apply(terms(topicModel2, 10), 2, paste, collapse = " ")  # reset topicnames
# Step 1: Check dimensions
n_theta <- nrow(theta)
n_textdata <- length(textdata$decade)
cat("Number of rows in theta: ", n_theta, "\n")
cat("Number of documents in textdata: ", n_textdata, "\n")
# Check if textdata contains all the documents in theta
common_ids <- intersect(rownames(theta), textdata$doc_id) # Assuming textdata has a 'doc_id' column
# Filter textdata to include only the documents present in theta
textdata_filtered <- textdata[textdata$doc_id %in% common_ids, ]
# Check dimensions after filtering
n_textdata_filtered <- nrow(textdata_filtered)
cat("Number of documents in filtered textdata: ", n_textdata_filtered, "\n")
# Ensure the lengths match now
if (n_theta != n_textdata_filtered) {
stop("The number of rows in 'theta' still does not match the length of 'textdata_filtered$decade'.")
}
# Align rownames of theta with filtered textdata
theta_aligned <- theta[rownames(theta) %in% textdata_filtered$doc_id, ]
# Optional: Verify the order of documents
if (!all(rownames(theta_aligned) == textdata_filtered$doc_id)) {
# If the order doesn't match, reorder one to match the other
textdata_filtered <- textdata_filtered[match(rownames(theta_aligned), textdata_filtered$doc_id), ]
}
# Ensure they are now aligned and can be combined
if (!all(rownames(theta_aligned) == textdata_filtered$doc_id)) {
stop("The document IDs still do not match. Please check the data alignment.")
}
# Step 2: Combine data
topic_data <- data.frame(theta_aligned, decade = textdata_filtered$decade)
# Step 3: Aggregate data
topic_proportion_per_decade <- aggregate(. ~ decade, data = topic_data, FUN = mean)
# get mean topic proportions per decade
# topic_proportion_per_decade <- aggregate(theta, by = list(decade = textdata$decade), mean)
# set topic names to aggregated columns
colnames(topic_proportion_per_decade)[2:(K+1)] <- topicNames
# reshape data frame
vizDataFrame <- melt(topic_proportion_per_decade, id.vars = "decade")
# remove outliers, keep decades consistent with white press
vizDataFrame <- vizDataFrame %>%
filter(decade<1960)
View(vizDataFrame)
#add categories
vizDataFrame <- vizDataFrame %>%
mutate(category = case_when(
str_detect(variable,  "state nation unit bill citi associ york feder senat southern") ~ "investigate-prosecute",
str_detect(variable, "white negro man men lynch color year charg women woman") ~ "racism",
str_detect(variable, "law peopl race american civil right negro countri citizen protect") ~ "legislation",
str_detect(variable, "lynch mob negro south law crime continu murder violenc punish") ~ "lynch_mob",
str_detect(variable, "court juri sheriff counti governor mrs case judg trial grand") ~ "legal",
str_detect(variable, "jail mob bodi negro night death shot home hang counti") ~ "misc_lynching",
))
theta2 <- as.data.frame(theta)
unknown <- theta2 %>%
#renaming for a general topic
rename(unknown = '6') %>%
top_n(20, unknown ) %>%
arrange(desc(unknown )) %>%
select(unknown )
View(unknown)
View(vizDataFrame)
unknown  <- tibble::rownames_to_column(unknown , "story_id")
unknown $story_id <- gsub("X", "", unknown $story_id)
head(unknown$story_id, 20)
View(topic_proportion_per_decade)
View(topic_data)
View(theta_aligned)
topicNames
theta2 <- as.data.frame(theta)
legal <- theta2 %>%
#renaming for a general topic
rename(legal = '6') %>%
top_n(20, legal ) %>%
arrange(desc(legal)) %>%
select(legal)
# Apply rownames_to_column
legal <- tibble::rownames_to_column(legal, "story_id")
legal$story_id <- gsub("X", "", legal$story_id)
head(legal$story_id, 20)
#Checks out June 24
# Step 1: Check dimensions
n_theta <- nrow(theta)
n_textdata <- length(textdata$decade)
cat("Number of rows in theta: ", n_theta, "\n")
cat("Number of documents in textdata: ", n_textdata, "\n")
# Check if textdata contains all the documents in theta
common_ids <- intersect(rownames(theta), textdata$doc_id) # Assuming textdata has a 'doc_id' column
# Filter textdata to include only the documents present in theta
textdata_filtered <- textdata[textdata$doc_id %in% common_ids, ]
# Check dimensions after filtering
n_textdata_filtered <- nrow(textdata_filtered)
cat("Number of documents in filtered textdata: ", n_textdata_filtered, "\n")
# Ensure the lengths match now
if (n_theta != n_textdata_filtered) {
stop("The number of rows in 'theta' still does not match the length of 'textdata_filtered$decade'.")
}
# Align rownames of theta with filtered textdata
theta_aligned <- theta[rownames(theta) %in% textdata_filtered$doc_id, ]
# Optional: Verify the order of documents
if (!all(rownames(theta_aligned) == textdata_filtered$doc_id)) {
# If the order doesn't match, reorder one to match the other
textdata_filtered <- textdata_filtered[match(rownames(theta_aligned), textdata_filtered$doc_id), ]
}
# Ensure they are now aligned and can be combined
if (!all(rownames(theta_aligned) == textdata_filtered$doc_id)) {
stop("The document IDs still do not match. Please check the data alignment.")
}
# Step 2: Combine data
topic_data <- data.frame(theta_aligned, decade = textdata_filtered$decade)
# Step 3: Aggregate data
topic_proportion_per_decade <- aggregate(. ~ decade, data = topic_data, FUN = mean)
# get mean topic proportions per decade
# topic_proportion_per_decade <- aggregate(theta, by = list(decade = textdata$decade), mean)
# set topic names to aggregated columns
colnames(topic_proportion_per_decade)[2:(K+1)] <- topicNames
# reshape data frame
vizDataFrame <- melt(topic_proportion_per_decade, id.vars = "decade")
# remove outliers, keep decades consistent with white press
vizDataFrame <- vizDataFrame %>%
filter(decade<1970)
#add categories
vizDataFrame <- vizDataFrame %>%
mutate(category = case_when(
str_detect(variable,  "state nation unit bill citi associ york feder senat southern") ~ "investigate-prosecute",
str_detect(variable, "white negro man men lynch color year charg women woman") ~ "racism",
str_detect(variable, "law peopl race american civil right negro countri citizen protect") ~ "legislation",
str_detect(variable, "lynch mob negro south law crime continu murder violenc punish") ~ "lynch_mob",
str_detect(variable, "court juri sheriff counti governor mrs case judg trial grand") ~ "legal_investigate",
str_detect(variable, "jail mob bodi negro night death shot home hang counti") ~ "misc_lynching",
))
theta2 <- as.data.frame(theta)
civil <- theta2 %>%
#renaming for a general topic
rename(civil = '5') %>%
top_n(20, civil ) %>%
arrange(desc(civil )) %>%
select(civil )
# Apply rownames_to_column
civil  <- tibble::rownames_to_column(civil , "story_id")
civil $story_id <- gsub("X", "", civil $story_id)
head(civil$story_id, 20)
#Checks out June 24
theta2 <- as.data.frame(theta)
legal <- theta2 %>%
#renaming for a general topic
rename(legal = '3') %>%
top_n(20, legal ) %>%
arrange(desc(legal )) %>%
select(legal )
# Apply rownames_to_column
legal  <- tibble::rownames_to_column(legal , "story_id")
legal $story_id <- gsub("X", "", legal $story_id)
head(legal$story_id, 20)
#Checks out June 24
theta2 <- as.data.frame(theta)
investigate <- theta2 %>%
#renaming for a general topic
rename(investigate = '1') %>%
top_n(20, investigate ) %>%
arrange(desc(investigate )) %>%
select(investigate )
# Apply rownames_to_column
investigate  <- tibble::rownames_to_column(investigate , "story_id")
investigate $story_id <- gsub("X", "", investigate $story_id)
head(investigate$story_id, 20)
#Checks out June 24
theta2 <- as.data.frame(theta)
racism <- theta2 %>%
#renaming for a general topic
rename(civil = '5') %>%
top_n(20, racism ) %>%
arrange(desc(racism )) %>%
select(racism )
theta2 <- as.data.frame(theta)
racism <- theta2 %>%
#renaming for a general topic
rename(racism = '5') %>%
top_n(20, racism ) %>%
arrange(desc(racism )) %>%
select(racism )
# Apply rownames_to_column
racism  <- tibble::rownames_to_column(racism , "story_id")
racism$story_id <- gsub("X", "", racism $story_id)
head(racism$story_id, 20)
#Checks out June 24
theta2 <- as.data.frame(theta)
legal <- theta2 %>%
#renaming for a general topic
rename(legal = '3') %>%
top_n(20, legal ) %>%
arrange(desc(legal )) %>%
select(legal )
# Apply rownames_to_column
legal  <- tibble::rownames_to_column(legal , "story_id")
legal $story_id <- gsub("X", "", legal $story_id)
head(legal$story_id, 20)
#Checks out June 24
theta2 <- as.data.frame(theta)
investigate <- theta2 %>%
#renaming for a general topic
rename(investigate = '1') %>%
top_n(20, investigate ) %>%
arrange(desc(investigate )) %>%
select(investigate )
# Apply rownames_to_column
investigate  <- tibble::rownames_to_column(investigate , "story_id")
investigate $story_id <- gsub("X", "", investigate $story_id)
head(investigate$story_id, 20)
#Checks out June 24
theta2 <- as.data.frame(theta)
misc <- theta2 %>%
#renaming for a general topic
rename(race = '2') %>%
top_n(20, misc ) %>%
arrange(desc(misc )) %>%
select(misc )
theta2 <- as.data.frame(theta)
misc <- theta2 %>%
#renaming for a general topic
rename(misc = '2') %>%
top_n(20, misc ) %>%
arrange(desc(misc )) %>%
select(misc )
# Apply rownames_to_column
misc  <- tibble::rownames_to_column(misc , "story_id")
misc$story_id <- gsub("X", "", misc $story_id)
head(misc$story_id, 20)
#Checks out June 24
# plot topic proportions per decade as bar plot
ggplot(vizDataFrame, aes(x=decade, y=value, fill=category)) +
geom_bar(stat = "identity") + ylab("proportion") +
scale_fill_manual(values = paste0(alphabet(20), "FF"), name = "decade") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(values=c("#9933FF",
"#33FFFF",
"red",
"yellow",
"darkblue",
"green"))+
#                           "blue"))+
#                           #"pink",
#                           #"gray",
#                           #"orange")) +
labs(title = "Common Narratives in Black Press Lynching News Coverage",
subtitle = "Six Probable Topics in 1,604 extracted articles",
caption = "Aggregate mean topic proportions per decade. Graphic by (redated - peer review) & (redated - peer review), 10-19-2024")
ggsave(here::here("../lynching_press/output_images_tables/Article_Images/Figure_14_black_press_topics_oct_19_2024.png"),device = "png",width=9,height=6, dpi=800)
# plot topic proportions per decade as bar plot
ggplot(vizDataFrame, aes(x=decade, y=value, fill=category)) +
geom_bar(stat = "identity") + ylab("proportion") +
scale_fill_manual(values = paste0(alphabet(20), "FF"), name = "decade") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(values=c("#9933FF",
"#33FFFF",
"red",
"yellow",
"darkblue",
"green"))+
#                           "blue"))+
#                           #"pink",
#                           #"gray",
#                           #"orange")) +
labs(title = "Common Narratives in Black Press Lynching News Coverage",
subtitle = "Six Probable Topics in 1,604 extracted articles",
caption = "Aggregate mean topic proportions per decade. Graphic by (redacted - peer review), 10-19-2024")
ggsave(here::here("../lynching_press/output_images_tables/Article_Images/Figure_14_black_press_topics_oct_19_2024.png"),device = "png",width=9,height=6, dpi=800)
# plot topic proportions per decade as bar plot
ggplot(vizDataFrame, aes(x=decade, y=value, fill=category)) +
geom_bar(stat = "identity") + ylab("proportion") +
scale_fill_manual(values = paste0(alphabet(20), "FF"), name = "decade") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_manual(values=c("#9933FF",
"#33FFFF",
"red",
"yellow",
"darkblue",
"green"))+
#                           "blue"))+
#                           #"pink",
#                           #"gray",
#                           #"orange")) +
labs(title = "Common Narratives in Black Press Lynching News Coverage",
subtitle = "Six probable topics in 1,604 extracted articles",
caption = "Aggregate mean topic proportions per decade. Graphic by (redacted - peer review), 10-19-2024")
ggsave(here::here("../lynching_press/output_images_tables/Article_Images/Figure_14_black_press_topics_oct_19_2024.png"),device = "png",width=9,height=6, dpi=800)
